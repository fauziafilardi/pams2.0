{"version":3,"sources":["webpack:///./src/views/TN/TN_FloorTes/TN_TesMap.vue?bc32","webpack:///src/views/TN/TN_FloorTes/TN_TesMap.vue","webpack:///./src/views/TN/TN_FloorTes/TN_TesMap.vue?77a6","webpack:///./src/views/TN/TN_FloorTes/TN_TesMap.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","selectedFeatures","attrs","options","size","model","value","callback","$$v","selected","expression","drawnFeatures","length","on","click","clear","ref","created","mapCreated","zoom","center","update:zoom","$event","update:center","id","url","images","one","imageSize","extent","imageExtent","_l","geojsonObject","feature","key","properties","geometry","type","coordinates","color","features","filter","selectFilter","update:features","ident","source","_e","staticRenderFns","TN_TesMapvue_type_script_lang_js_","data","text","crs","name","imageProj","mounted","methods","map","x","y","layer","selectableLayers","includes","get","selectInDrawnPolygon","_this","vectorSource","$refs","$source","drawSource","getExtent","console","log","forEachFeatureIntersectingExtent","VueLayers","ol","writeGeoJsonFeature","push","TN_FloorTes_TN_TesMapvue_type_script_lang_js_","component","Object","componentNormalizer","__file","__webpack_exports__"],"mappings":"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","file":"js/chunk-2d208143.131f34b1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content-app-form__body form-process\"},[_c('div',[_vm._v(\"\\n    Current selection: \"+_vm._s(_vm.selectedFeatures)+\"\\n  \")]),_c('div',[_c('b-form-select',{staticClass:\"mt-3\",attrs:{\"options\":_vm.options,\"size\":\"sm\"},model:{value:(_vm.selected),callback:function ($$v) {_vm.selected=$$v},expression:\"selected\"}})],1),(_vm.drawnFeatures.length === 0)?_c('div',[_vm._v(\"\\n      Draw point, line, polygon, circle to select features first\\n  \")]):_c('div',[_c('button',{on:{\"click\":_vm.clear}},[_vm._v(\"Clear All\")])]),_c('vl-map',{ref:\"map\",on:{\"created\":_vm.mapCreated}},[_c('vl-view',{ref:\"mapView\",attrs:{\"zoom\":_vm.zoom,\"center\":_vm.center},on:{\"update:zoom\":function($event){_vm.zoom=$event},\"update:center\":function($event){_vm.center=$event}}}),_c('vl-layer-image',{attrs:{\"id\":\"static\"}},[_c('vl-source-image-static',{attrs:{\"url\":_vm.images.one,\"size\":_vm.images.imageSize,\"extent\":_vm.images.imageExtent}})],1),_c('vl-layer-vector',{ref:\"vectorLayer\",attrs:{\"id\":\"my-features\"}},[_c('vl-source-vector',{ref:\"vectorSource\"},_vm._l((_vm.geojsonObject.features),function(feature){return _c('vl-feature',{key:feature.id,attrs:{\"id\":feature.id,\"properties\":feature.properties}},[_vm._v(\"\\n                    \"+_vm._s(feature.geometry.type)+\"\\n          \"),_c('vl-geom-polygon',{attrs:{\"coordinates\":feature.geometry.coordinates}}),_c('vl-style-box',[_c('vl-style-fill',{attrs:{\"color\":\"blue\"}}),_c('vl-style-stroke',{attrs:{\"color\":\"red\"}})],1)],1)}))],1),_c('vl-interaction-select',{ref:\"selectInteraction\",attrs:{\"features\":_vm.selectedFeatures,\"filter\":_vm.selectFilter},on:{\"update:features\":function($event){_vm.selectedFeatures=$event}}}),_c('vl-layer-vector',{attrs:{\"id\":\"draw-pane\"}},[_c('vl-source-vector',{ref:\"drawSource\",attrs:{\"ident\":\"draw-target\",\"features\":_vm.drawnFeatures},on:{\"update:features\":function($event){_vm.drawnFeatures=$event}}})],1),(_vm.selected != null)?_c('vl-interaction-draw',{attrs:{\"source\":\"draw-target\",\"type\":_vm.selected}}):_vm._e(),_c('vl-interaction-modify',{attrs:{\"source\":\"draw-target\"}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <!-- <vl-map :load-tiles-while-animating=\"true\" :load-tiles-while-interacting=\"true\" style=\"height: 400px\">\n    <vl-view :projection=\"projection\" :zoom.sync=\"zoom\" :center.sync=\"center\" :rotation.sync=\"rotation\"></vl-view>\n\n    <vl-layer-image id=\"xkcd\">\n      <vl-source-image-static :url=\"imgUrl\" :size=\"imgSize\" :extent=\"imgExtent\" :projection=\"projection\"\n                              :attributions=\"imgCopyright\">\n      </vl-source-image-static>\n    </vl-layer-image>\n  </vl-map> -->\n  <div class=\"content-app-form__body form-process\">\n    <div>\n      Current selection: {{ selectedFeatures }}\n    </div>\n    <div>\n      <b-form-select v-model=\"selected\" :options=\"options\" size=\"sm\" class=\"mt-3\"></b-form-select>\n      <!-- {{drawnFeatures\n      }} -->\n    </div>\n    <div v-if=\"drawnFeatures.length === 0\">\n        Draw point, line, polygon, circle to select features first\n    </div>\n    <div v-else>\n        <!-- <button @click=\"selectInDrawnPolygon\">Select intersected features</button> -->\n        <button @click=\"clear\">Clear All</button>\n    </div>\n    <!-- {{images.one}}\n    {{images.imageSize}}\n    {{images.imageExtent}} -->\n    <!-- {{zoom}} -->\n    <vl-map ref=\"map\" @created=\"mapCreated\">\n      <vl-view ref=\"mapView\" :zoom.sync=\"zoom\" :center.sync=\"center\"></vl-view>\n\n\n      <!-- untuk image -->\n      <vl-layer-image id=\"static\">\n        <vl-source-image-static\n          :url=\"images.one\"\n          :size=\"images.imageSize\"\n          :extent=\"images.imageExtent\">\n        </vl-source-image-static>\n      </vl-layer-image>\n      \n      <!-- untuk map -->\n      <!-- <vl-layer-tile>\n        <vl-source-osm />\n      </vl-layer-tile> -->\n      \n      <vl-layer-vector ref=\"vectorLayer\" id=\"my-features\">\n        <vl-source-vector ref=\"vectorSource\">\n          <vl-feature v-for=\"feature in geojsonObject.features\" :key=\"feature.id\"\n                      :id=\"feature.id\" :properties=\"feature.properties\">\n                      {{feature.geometry.type}}\n            <vl-geom-polygon :coordinates=\"feature.geometry.coordinates\">\n              <!-- <vl-style-fill color=\"#666666\">\n              </vl-style-fill> -->\n              <!-- <vl-style-box>\n                <vl-style-stroke color=\"red\"></vl-style-stroke>\n              </vl-style-box> -->\n            </vl-geom-polygon>\n            <vl-style-box>\n              <vl-style-fill color=\"blue\"></vl-style-fill>\n              <vl-style-stroke color=\"red\"></vl-style-stroke>\n            </vl-style-box>\n          </vl-feature>\n        </vl-source-vector>\n      </vl-layer-vector>\n      \n      <vl-interaction-select ref=\"selectInteraction\" :features.sync=\"selectedFeatures\" :filter=\"selectFilter\">\n      </vl-interaction-select>\n\n      <!-- draw components -->\n      <vl-layer-vector id=\"draw-pane\">\n        <vl-source-vector ref=\"drawSource\" ident=\"draw-target\" :features.sync=\"drawnFeatures\"></vl-source-vector>\n      </vl-layer-vector>\n      \n      <vl-interaction-draw v-if=\"selected != null\" source=\"draw-target\" :type=\"selected\"></vl-interaction-draw>\n      \n      <vl-interaction-modify source=\"draw-target\"></vl-interaction-modify>\n    </vl-map>  \n  </div>\n</template>\n\n<script>\n  import * as olExt from 'vuelayers/lib/ol-ext'\n  export default {\n    data () {\n      return { \n        // zoom: 5,\n        // center: [0, 3000000],\n        selectedFeatures: [],\n        drawnFeatures: [],\n\n        selected: null,\n        //  Drawing type ('Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon' or 'Circle').\n        options: [\n          { value: null, text: 'Please select an option' },\n          { value: 'Point', text: 'Point' },\n          { value: 'LineString', text: 'Line String' },\n          { value: 'Polygon', text: 'Polygon' },\n          { value: 'Circle', text: 'Circle' }\n        ],\n\n        // data for draw coordinate\n        geojsonObject : {\n          'type': 'FeatureCollection',\n          'crs': {\n            'type': 'name',\n            'properties': {\n              'name': 'EPSG:3857'\n            }\n          },\n          'features': [\n          // {\n          //   'id': 1,\n          //   'type': 'Feature',\n          //   'geometry': {\n          //     'type': 'Polygon',\n          //     'coordinates': [[[-5e6, 6e6], [-5e6, 8e6], [-3e6, 8e6],\n          //                     [-3e6, 6e6], [-5e6, 6e6]]]\n          //   }\n          // },\n          // {\n          //   'id': 2,\n          //   'type': 'Feature',\n          //   'geometry': {\n          //     'type': 'Polygon',\n          //     'coordinates': [[[-2e6, 6e6], [-2e6, 8e6], [0, 8e6],\n          //                     [0, 6e6], [-2e6, 6e6]]]\n          //   }\n          // },\n          // {\n          //   'id': 3,\n          //   'type': 'Feature',\n          //   'geometry': {\n          //     'type': 'Polygon',\n          //     'coordinates': [[[1e6, 6e6], [1e6, 8e6], [3e6, 8e6],\n          //                     [3e6, 6e6], [1e6, 6e6]]]\n          //   }\n          // },\n          {\n            'id': 4,\n            'type': 'Feature',\n            'geometry': {\n              'type': 'Polygon',\n              'coordinates': [[[-2e6, -1e6], [-1e6, 1e6],\n                              [0, -1e6], [-2e6, -1e6]]]\n            }\n          }]\n        },\n\n        // image\n        zoom: 2,\n        center: [0, 0],\n        // imageProj: customProj.getCode(),\n        imageProj: 'xkcd-image',\n        images: {\n          // one: 'https://imgs.xkcd.com/comics/online_communities.png',\n          one: 'http://192.168.6.9/PAMSAPI/SaveLocation/SubPortfolio/001/FloorPlan/peta-kabupaten-lebak.jpg',\n          imageSize: [1024, 968],\n          imageExtent: [0, 0, 1024, 968],\n        },\n      }\n    },\n    mounted () {\n      // setTimeout(() => {    \n      //   this.$refs.mapView.$view.fit(this.$refs.vectorSource.$source.getExtent(), {\n      //     size: this.$refs.map.$map.getSize(),\n      //     duration: 1000,\n      //   })\n      // }, 1000)\n    },\n    methods: {\n      /**\n       * @param {Vue} map - vl-map instance\n       */\n      mapCreated (map) {\n        // // a DragBox interaction used to select features by drawing boxes\n        // const dragBox = new ol.interaction.DragBox({\n        //   condition: ol.events.condition.platformModifierKeyOnly\n        // })\n\n        // map.$map.addInteraction(dragBox)\n        \n        // dragBox.on('boxend', () => {\n        //   // features that intersect the box are added to the collection of\n        //   // selected features\n        //   const extent = dragBox.getGeometry().getExtent()\n        //   /** @var {ol.source.Vector} source */\n        //   const source = this.$refs.vectorSource.$source\n          \n        //   source.forEachFeatureIntersectingExtent(extent, feature => {\n        //     feature = VueLayers.ol.writeGeoJsonFeature(feature)\n        //     this.selectedFeatures.push(feature)\n        //   })\n        // })\n        \n        // // clear selection when drawing a new box and when clicking on the map\n        // dragBox.on('boxstart', () => {\n        //   this.selectedFeatures = []\n        // })\n\n        // untuk image\n        // Custom projection for static Image layer\n        let x = 1024 * 10000\n        let y = 968 * 10000\n        this.images.imageExtent = [-x / 2, -y / 2, x / 2, y / 2]\n        // let customProj = new ol.proj.Projection({\n        //   code: 'xkcd-image',\n        //   units: 'pixels',\n        //   extent: this.images.imageExtent,\n        // })\n        // add to the list of known projections\n        // after that it can be used by code\n        // ol.proj.addProjection(customProj)\n      },\n      selectFilter (feature, layer) {\n        const selectableLayers = ['my-features']\n      \n        return layer != null && selectableLayers.includes(layer.get('id'))\n      },\n      selectInDrawnPolygon () {\n        const vectorSource = this.$refs.vectorSource.$source\n        const drawSource = this.$refs.drawSource.$source\n        const extent = drawSource.getExtent()\n        console.log(extent)\n        vectorSource.forEachFeatureIntersectingExtent(extent, feature => {\n          feature = VueLayers.ol.writeGeoJsonFeature(feature)\n          this.selectedFeatures.push(feature)\n        })\n        \n        this.drawnFeatures = []\n      },\n      clear () {\n        this.drawnFeatures = []\n      },\n    },\n  }\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TN_TesMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TN_TesMap.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TN_TesMap.vue?vue&type=template&id=3ed5f68a&\"\nimport script from \"./TN_TesMap.vue?vue&type=script&lang=js&\"\nexport * from \"./TN_TesMap.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"TN_TesMap.vue\"\nexport default component.exports"],"sourceRoot":""}